{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startBtn = document.querySelector('button[data-start]');\nconst daysValue = document.querySelector('span[data-days]');\nconst hoursValue = document.querySelector('span[data-hours]');\nconst minutesValue = document.querySelector('span[data-minutes]');\nconst secondsValue = document.querySelector('span[data-seconds]');\nconst datePicker = document.querySelector('#datetime-picker');\n\nstartBtn.addEventListener('click', startTimer);\n\nlet userSelectedDate = null;\nlet timerId = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= new Date()) {\n      return iziToast.error({\n        position: 'topRight',\n        message: 'Please choose a date in the future',\n      });\n    }\n    userSelectedDate = selectedDates[0];\n    startBtn.disabled = false;\n  },\n};\n\nflatpickr(datePicker, options);\n\nfunction startTimer() {\n  datePicker.disabled = true;\n  startBtn.disabled = true;\n\n  timerId = setInterval(updateTimer, 1000);\n  return;\n}\n\nfunction updateTimer() {\n  const curentTime = userSelectedDate - new Date();\n\n  if (curentTime <= 0) {\n    datePicker.disabled = false;\n    clearInterval(timerId);\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(curentTime);\n\n  daysValue.textContent = String(days).padStart(2, 0);\n  hoursValue.textContent = String(hours).padStart(2, 0);\n  minutesValue.textContent = String(minutes).padStart(2, 0);\n  secondsValue.textContent = String(seconds).padStart(2, 0);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}"],"names":["startBtn","daysValue","hoursValue","minutesValue","secondsValue","datePicker","startTimer","userSelectedDate","timerId","options","selectedDates","iziToast","flatpickr","updateTimer","curentTime","days","hours","minutes","seconds","convertMs","ms"],"mappings":"2GAKA,MAAMA,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAY,SAAS,cAAc,iBAAiB,EACpDC,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAe,SAAS,cAAc,oBAAoB,EAC1DC,EAAe,SAAS,cAAc,oBAAoB,EAC1DC,EAAa,SAAS,cAAc,kBAAkB,EAE5DL,EAAS,iBAAiB,QAASM,CAAU,EAE7C,IAAIC,EAAmB,KACnBC,EAAU,KAEd,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAIA,EAAc,CAAC,GAAK,IAAI,KAC1B,OAAOC,EAAS,MAAM,CACpB,SAAU,WACV,QAAS,oCACjB,CAAO,EAEHJ,EAAmBG,EAAc,CAAC,EAClCV,EAAS,SAAW,EACrB,CACH,EAEAY,EAAUP,EAAYI,CAAO,EAE7B,SAASH,GAAa,CACpBD,EAAW,SAAW,GACtBL,EAAS,SAAW,GAEpBQ,EAAU,YAAYK,EAAa,GAAI,CAEzC,CAEA,SAASA,GAAc,CACrB,MAAMC,EAAaP,EAAmB,IAAI,KAE1C,GAAIO,GAAc,EAAG,CACnBT,EAAW,SAAW,GACtB,cAAcG,CAAO,EACrB,MACD,CAED,KAAM,CAAE,KAAAO,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAU,EAE9Db,EAAU,YAAc,OAAOc,CAAI,EAAE,SAAS,EAAG,CAAC,EAClDb,EAAW,YAAc,OAAOc,CAAK,EAAE,SAAS,EAAG,CAAC,EACpDb,EAAa,YAAc,OAAOc,CAAO,EAAE,SAAS,EAAG,CAAC,EACxDb,EAAa,YAAc,OAAOc,CAAO,EAAE,SAAS,EAAG,CAAC,CAC1D,CAEA,SAASC,EAAUC,EAAI,CAQrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAE1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EAEpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EAEjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}